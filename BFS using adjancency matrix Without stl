# include <bits/stdc++.h>
using namespace std;
#define max_size 1000
class LinearQueue{
    int *arr;
    int front,rear,n;
public:
    LinearQueue(){
        n=max_size;
        arr=new int[n];
        front=0;
        rear=-1;
    }
    void push(int num){
        if(rear==n-1)
            cout<<"Queue is full\n";
        arr[++rear]=num;
    }
    bool isFull()
    {
    	if(rear==n-1)
            return true;
            return false;
	}
	bool isEmpty()
	{
		if(front==rear+1)
		return true;
		return false;
	}
    int pop(){
        if(front==rear+1){
            cout<<"Queue is empty\n";
            return INT_MAX;
        }
        return arr[front++];
    }
    int peek()
    {
    	if(isEmpty())
    	{
    		cout<<"Queue is empty"<<"\n";
    		return INT_MAX;
		}
		else
		{
			return arr[front];
		}
	}
    void print(){
        for (int i=front;i<rear+1;++i)
        {
            cout<<arr[i]<<" ";
        }
        cout <<"\n";
    }

};
void BFS(int **adj,int n,int source)
{
	int visited[n],i,j;
	for(i=0;i<n;i++)
	visited[i]=0;
	LinearQueue q;
	q.push(source);
	visited[source]=1;
	int vis;
	while(q.isEmpty()==false)
	{
		vis=q.peek();
		q.pop();
		for(i=0;i<n;i++)
		{
			if(adj[vis][i]==1 && visited[i]==0)
			{
				q.push(i);
				visited[i]=1;
			}
		}
		cout<<vis<<" ";
	}
}
int main()
{
	fstream infile;
	infile.open("BFS.txt",ios::in);
	if(!infile)
	{
		cout<<"File cannot be open"<<"\n";
		return 0;
	}
	int n,m;
	cout<<"Enter the number of vertices"<<"\n";
	infile>>n;
	cout<<"Enter the number of edges"<<"\n";
	infile>>m;
	int **adj=new int*[n];
	int i,j;
	for(i=0;i<n;i++)
	{
		adj[i]=new int[n];
	}
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		infile>>adj[i][j];
	}
	int source;
	infile>>source;
	BFS(adj,n,source);
	return 0;
}
