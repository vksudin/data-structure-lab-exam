//kruskals algorithm 
//Time complexity O(ElogE) E-total number of edges
//space complexity O(V)
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
struct node{
	int u;
	int v;
	int wt;
//	node(int first,int second,int weight)
//	{
//		u=first;
//		v=second;
//		wt=weight;
//	}
};
struct Pair{
    int first;
    int second;
//    Pair(int a,int b)
//    {
//        first=a;
//        second=b;
//    }
};
bool comp(node a,node b)
{
	return a.wt<b.wt;
}

void Swap(struct node* a,struct node* b)
{
    //First swap the weights
    int temp=a->wt;
    a->wt=b->wt;
    b->wt=temp;
    //Second swap the parent
    temp=a->u;
    a->u=b->u;
    b->u=temp;
    //Third swap the destination
    temp=a->v;
    a->v=b->v;
    b->v=temp;
    
}

int findPar(int u,int parent[])
{
	if(parent[u]==u)
	return u;
	return parent[u]=findPar(parent[u],parent);
}

void Union(int u,int v,int parent[],int rank[])
{
	u=findPar(u,parent);
	v=findPar(v,parent);
	if(rank[u]<rank[v])
	{
		parent[u]=v;
	}
	else if(rank[u]>rank[v])
	{
		parent[v]=u;
	}
	else
	{
		parent[v]=u;
		rank[u]++;
	}
	
}

int partition(node edges[],int l,int r)
{
    int pivot=edges[r].wt;
    int i=l-1;
    for(int j=l;j<r;j++)
    {
        if(edges[j].wt<pivot)
        {
            i++;
            Swap(&edges[i],&edges[j]);
        }
    }
    Swap(&edges[i+1],&edges[r]);
    return i+1;
}

void QuickSort(node edges[],int l,int r)
{
    if(l<r)
    {
        int pi=partition(edges,l,r);
        QuickSort(edges,l,pi-1);
        QuickSort(edges,pi+1,r);
    }
}
int main()
{
	fstream infile;
	
	infile.open("Kruskals_algo.txt",ios::in);
	if (!infile)
    {
        cout << "Error to open the file";
        return 1;
    }
	int n,m;
	cout<<"Enter the number of vertices and number of edges"<<"\n";
    infile>>n>>m;
	node edges[m];
	int i;
	cout<<"Enter the all edges and their adjacent vertices and weight"<<"\n";
	for(i=0;i<m;i++)
	{
		int u,v,wt;//0 1 4
		infile>>u>>v>>wt;           
		edges[i].u=u;
		edges[i].v=v;
		edges[i].wt=wt;    
	}
	
	int parent[n];
	for(i=0;i<n;i++)
	{
		parent[i]=i;
	}
	
	
	int rank[n];
	
	QuickSort(edges,0,m-1);
	
	for(i=0;i<n;i++)
	rank[i]=0;
	
	int res=0;

    Pair mst[n-1];
	int k=0;
	for(i=0;i<m;i++)
	{
		if(findPar(edges[i].u,parent)!=findPar(edges[i].v,parent))
		{
			res+=edges[i].wt;
			Union(edges[i].u,edges[i].v,parent,rank);
			mst[k].first=edges[i].u;
			mst[k].second=edges[i].v;
			k++;
		}
	}
	cout<<"The cost of the spanning tree is"<<"\n";
	cout<<res<<"\n";
	cout<<"The tree is"<<"\n";
	for(i=0;i<k;i++)
	{
		cout<<mst[i].first<<" "<<mst[i].second<<"\n";
	}
}
