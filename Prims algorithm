#include<iostream>
#include<bits/stdc++.h>
#include<fstream>
using namespace std;
//Time complexity O(V^2) v=number of vertices
//Here i will use adjacency matrix for my understanding for reduce the time comlexity you should use 
//adjancency list
int findMin(int value[],int isMST[],int v)
{
	int minimum=INT_MAX,i;
	int vertex;
	for(i=0;i<v;i++)
	{
		if(isMST[i]==false && value[i]<minimum)
		{
			minimum=value[i];
			vertex=i;
		}
	}
	return vertex;
}
void MST(int **adj,int v,int source)
{
	int parent[v],i,j,total=0;//this is for knowing the parent node
	int value[v];//this is for keep tracking the value
	int isMST[v];//this is for include the vertex in the minimal spanning tree
	
	for(i=0;i<v;i++)
	value[i]=INT_MAX;
	
	for(i=0;i<v;i++)
	isMST[i]=0;
	
	parent[source]=-1;
	value[source]=0;
	
	for(i=0;i<v-1;i++)
	{
		int u=findMin(value,isMST,v);
		isMST[u]=true;
		for(j=0;j<v;j++)
		{
			if(adj[u][j]!=0 && isMST[j]==false && adj[u][j]<value[j])
			{
				value[j]=adj[u][j];
				parent[j]=u;
			}
		}
	}
	cout<<"The minimum spanning tree is"<<"\n";
	for(i=1;i<v;i++)
	{
		cout<<parent[i]<<" "<<i<<" "<<adj[parent[i]][i]<<"\n";
		total=total+adj[parent[i]][i];
	}
	cout<<"The cost of the spanning tree is"<<"\n";
	cout<<total<<"\n";
	
}

int main()
{
	fstream infile;
	infile.open("C:\\Users\\sudin jana\\Desktop\\data structure and algorithm\\graph\\prims.txt",ios::in);
	if (!infile)
       {
        cout << "Error to open the file";
        return 1;
        }
	int n,i,j,e,source;//number
	cout<<"Enter the number of vertices"<<"\n";
	infile>>n;
	cout<<"Enter the number of edges"<<"\n";
	infile>>e;
	cout<<"Enter the source"<<"\n";
	infile>>source;
	int u,v,wt;
	int **adj=new int*[n];
	for(i=0;i<n;i++)
	{
		adj[i]=new int[n];
	}
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		adj[i][j]=0;
	}

 cout<<"Enter the all edges and their edges"<<"\n";
 for(i=0;i<n;i++)
 {
 	for(j=0;j<n;j++)
 	infile>>adj[i][j];
 }
   
	
	MST(adj,n,source);
}
