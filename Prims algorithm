#include<iostream>
#include<bits/stdc++.h>
using namespace std;
//Time complexity O(V^2) v=number of vertices
//Here i will use adjacency matrix for my understanding for reduce the time comlexity you should use 
//adjancency list
int findMin(vector<int>& value,vector<bool>& isMST,int v)
{
	int minimum=INT_MAX,i;
	int vertex;
	for(i=0;i<v;i++)
	{
		if(isMST[i]==false && value[i]<minimum)
		{
			minimum=value[i];
			vertex=i;
		}
	}
	return vertex;
}
void MST(int **adj,int v)
{
	int parent[v],i,j,total=0;//this is for knowing the parent node
	vector<int> value;//this is for keep tracking the value
	vector<bool> isMST;//this is for include the vertex in the minimal spanning tree
	
	for(i=0;i<v;i++)
	value.push_back(INT_MAX);
	
	for(i=0;i<v;i++)
	isMST.push_back(false);
	
	parent[0]=-1;
	value[0]=0;
	
	for(i=0;i<v-1;i++)
	{
		int u=findMin(value,isMST,v);
		isMST[u]=true;
		for(j=0;j<v;j++)
		{
			if(adj[u][j]!=0 && isMST[j]==false && adj[u][j]<value[j])
			{
				value[j]=adj[u][j];
				parent[j]=u;
			}
		}
	}
	for(i=1;i<v;i++)
	{
		cout<<parent[i]<<" "<<i<<" "<<adj[parent[i]][i]<<"\n";
		total=total+adj[parent[i]][i];
	}
	cout<<total<<"\n";
	
}

int main()
{
	int n,i,j,e;//number
	cout<<"Enter the number of vertices"<<"\n";
	cin>>n;
	cout<<"Enter the number of edges"<<"\n";
	cin>>e;
	int u,v,wt;
	int **adj=new int*[n];
	for(i=0;i<n;i++)
	{
		adj[i]=new int[n];
	}
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		adj[i][j]=0;
	}

 cout<<"Enter the all edges and their edges"<<"\n";
 
   for(i=0;i<e;i++)
   {
   	cin>>u>>v>>wt;
   	adj[u][v]=wt;
   	adj[v][u]=wt;
   }
	
	MST(adj,n);
}
