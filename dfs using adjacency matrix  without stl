# include <bits/stdc++.h>
using namespace std;
#define max_size 1000
/*
 * Time Complexities:
 * isFull() O(1)
 * isEmpty() O(1)
 * push() O(1)
 * pop() O(1)
 * display() O(n) where n is current stack size
 * peek() O(1)
 * */
class Stack{
    int *arr, top, MAX;
public:
    Stack(){
        top=-1;
        arr=new int[max_size];
        MAX=max_size;
    }
    int isFull(){
        if(top==MAX-1)
            return 1;
        else
            return 0;
    }
    int isEmpty(){
        if(top==-1)
            return 1;
        else
            return 0;
    }
    void push(int num){
        if(!isFull()){
            top++;
            arr[top]=num;
        }
        else
            cout<<"Stack is full cannot make any more entries\n";
    }
    void pop(){
        if(!isEmpty()){
            int num=arr[top];
            top--;
            //return num;
        }
        else{
            cout<<"Stack is empty no more popping possible\n";
            //return INT_MAX;
        }
    }
    void display(){
        if (isEmpty())
            cout<<"Stack is empty! Nothing to display here!!\n";
        else{
            for (int i=0;i<=top;++i) {
                cout<<arr[i]<<" ";
            }
            cout<<"\n";
        }
    }
    int peek(){
        if (isEmpty()){
            cout<<"Stack is empty!\n";
            return INT_MAX;
        }
        return arr[top];
    }
};
void DFS(int **adj,int n,int source)
{
	int visited[n],i;
	for(i=0;i<n;i++)
	visited[i]=0;
	Stack s;
	//visited[source]=1;
	s.push(source);
	while(s.isEmpty()==false)
	{
		int vis=s.peek();
		s.pop();
		if(visited[vis]==0)
		{
			cout<<vis<<" ";
			visited[vis]=1;
		}
		for(i=0;i<n;i++)
		{
			if(adj[vis][i]==1 && visited[i]==0)
			{
				s.push(i);
				
			}
		}
		
	}
}
int main()
{
	fstream infile;
	infile.open("DFS.txt",ios::in);
	if(!infile)
	{
		cout<<"File cannot be open"<<"\n";
		return 0;
	}
	int n,m;
	cout<<"Enter the number of vertices"<<"\n";
	infile>>n;
	cout<<"Enter the number of edges"<<"\n";
	infile>>m;
	int **adj=new int*[n];
	int i,j;
	for(i=0;i<n;i++)
	{
		adj[i]=new int[n];
	}
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		infile>>adj[i][j];
	}
	int source;
	infile>>source;
	DFS(adj,n,source);
	return 0;
}
